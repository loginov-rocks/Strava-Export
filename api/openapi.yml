openapi: 3.0.3
info:
  title: Strava Export API
  description: API for exporting and managing Strava activity data
  version: 0.1.0
  contact:
    name: Danila Loginov
    email: danila@loginov.rocks
    url: https://loginov.rocks
  license:
    name: MIT
    url: https://github.com/loginov-rocks/Strava-Export/blob/main/LICENSE

externalDocs:
  description: GitHub
  url: https://github.com/loginov-rocks/Strava-Export

servers:
  - url: http://localhost:3001
    description: Local Server

security:
  - bearerAuth: []
  - webAuthAccess: []

paths:
  /:
    get:
      summary: Healthcheck
      description: API health check endpoint
      tags:
        - Healthcheck
      responses:
        200:
          description: API is healthy
          content:
            text/plain:
              schema:
                type: string
                example: OK

  /auth/login:
    get:
      summary: Redirect to Strava authorization
      description: Redirects user to Strava OAuth authorization page
      tags:
        - Web Auth
      responses:
        302:
          description: Redirect to Strava authorization URL
          headers:
            Location:
              description: Strava authorization URL
              schema:
                type: string
                format: uri

  /auth/callback:
    get:
      summary: Exchange authorization code for tokens
      description: Exchange OAuth authorization code for access and refresh tokens, then redirect to web app
      tags:
        - Web Auth
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: OAuth authorization code from Strava
        - name: scope
          in: query
          required: false
          schema:
            type: string
          description: Optional OAuth scopes
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: Optional state parameter
      responses:
        302:
          description: Tokens exchanged successfully, redirecting to web app
          headers:
            Location:
              description: Web app URL
              schema:
                type: string
                format: uri
            Set-Cookie:
              description: Access and refresh tokens set as HTTP-only cookies
              schema:
                type: string
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"

  /auth/me:
    get:
      summary: Get authenticated user info
      description: Get information about the currently authenticated user
      tags:
        - Web Auth
      security:
        - webAuthAccess: []
      responses:
        200:
          description: User is authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: Authenticated user ID
                required:
                  - userId
        401:
          $ref: "#/components/responses/Unauthorized"

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Refresh expired access token using refresh token
      tags:
        - Web Auth
      security:
        - webAuthRefresh: []
      responses:
        204:
          description: Token refreshed successfully
          headers:
            Set-Cookie:
              description: New access and refresh tokens set as HTTP-only cookies
              schema:
                type: string
        401:
          $ref: "#/components/responses/Unauthorized"

  /auth/logout:
    post:
      summary: Logout user
      description: Clear authentication tokens and logout user
      tags:
        - Web Auth
      security:
        - webAuthAccess: []
      responses:
        204:
          description: Logged out successfully
          headers:
            Set-Cookie:
              description: Authentication cookies cleared
              schema:
                type: string
        401:
          $ref: "#/components/responses/Unauthorized"

  /activities:
    get:
      summary: Get activities
      description: Retrieve user's activities with optional filtering and sorting
      tags:
        - Activities
      security:
        - webAuthAccess: []
        - bearerAuth: []
      parameters:
        - name: sportType
          in: query
          schema:
            $ref: "#/components/schemas/SportType"
          description: Filter by sport type
        - name: from
          in: query
          schema:
            type: string
            format: date-time
          description: Filter activities from this date (ISO format)
        - name: to
          in: query
          schema:
            type: string
            format: date-time
          description: Filter activities to this date (ISO format)
        - name: lastDays
          in: query
          schema:
            type: integer
            minimum: 1
          description: Filter activities from the last N days
        - name: lastWeeks
          in: query
          schema:
            type: integer
            minimum: 1
          description: Filter activities from the last N weeks
        - name: lastMonths
          in: query
          schema:
            type: integer
            minimum: 1
          description: Filter activities from the last N months
        - name: lastYears
          in: query
          schema:
            type: integer
            minimum: 1
          description: Filter activities from the last N years
        - name: sort
          in: query
          schema:
            type: string
            enum: [startDateTime]
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order
        - name: withStravaData
          in: query
          schema:
            type: boolean
            default: false
          description: Include raw Strava data in response
      responses:
        200:
          description: Activities retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ActivitiesCollection"
                  - $ref: "#/components/schemas/ActivitiesWithStravaDataCollection"
            text/plain:
              schema:
                type: string
                description: Activities formatted as plain text
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete activities
      description: Delete all user's activities
      tags:
        - Activities
      security:
        - webAuthAccess: []
      responses:
        204:
          description: All activities deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /activities/last:
    get:
      summary: Get last activity
      description: Retrieve user's most recent activity
      tags:
        - Activities
      security:
        - webAuthAccess: []
        - bearerAuth: []
      parameters:
        - name: sportType
          in: query
          schema:
            $ref: "#/components/schemas/SportType"
          description: Filter by sport type
        - name: withStravaData
          in: query
          schema:
            type: boolean
            default: false
          description: Include raw Strava data in response
      responses:
        200:
          description: Last activity retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Activity"
                  - $ref: "#/components/schemas/ActivityWithStravaData"
            text/plain:
              schema:
                type: string
                description: Activity formatted as plain text
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /activities/{activityId}:
    get:
      summary: Get activity by ID
      description: Retrieve a specific activity by its ID
      tags:
        - Activities
      security:
        - webAuthAccess: []
        - bearerAuth: []
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
          description: Activity ID
        - name: withStravaData
          in: query
          schema:
            type: boolean
            default: false
          description: Include raw Strava data in response
      responses:
        200:
          description: Activity retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Activity"
                  - $ref: "#/components/schemas/ActivityWithStravaData"
            text/plain:
              schema:
                type: string
                description: Activity formatted as plain text
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /pats:
    post:
      summary: Create Personal Access Token
      description: Create a new Personal Access Token for API authentication
      tags:
        - Personal Access Tokens
      security:
        - webAuthAccess: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the PAT
              required:
                - name
      responses:
        201:
          description: PAT created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedPat"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

    get:
      summary: Get Personal Access Tokens
      description: Retrieve all PATs for the authenticated user
      tags:
        - Personal Access Tokens
      security:
        - webAuthAccess: []
      responses:
        200:
          description: PATs retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatsCollection"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /pats/{patId}:
    get:
      summary: Get Personal Access Token by ID
      description: Retrieve a specific PAT by its ID
      tags:
        - Personal Access Tokens
      security:
        - webAuthAccess: []
      parameters:
        - name: patId
          in: path
          required: true
          schema:
            type: string
          description: PAT ID
      responses:
        200:
          description: PAT retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pat"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete Personal Access Token
      description: Delete a specific PAT by its ID
      tags:
        - Personal Access Tokens
      security:
        - webAuthAccess: []
      parameters:
        - name: patId
          in: path
          required: true
          schema:
            type: string
          description: PAT ID
      responses:
        204:
          description: PAT deleted successfully
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /sync:
    post:
      summary: Create sync job
      description: Create a new sync job to synchronize activities from Strava
      tags:
        - Sync Jobs
      security:
        - webAuthAccess: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshLastDays:
                  type: integer
                  minimum: 1
                  description: Refresh details for activities from the last N days
      responses:
        201:
          description: Sync job created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyncJob"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

    get:
      summary: Get sync jobs
      description: Retrieve all sync jobs for the authenticated user
      tags:
        - Sync Jobs
      security:
        - webAuthAccess: []
      responses:
        200:
          description: Sync jobs retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyncJobsCollection"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"

  /sync/{syncJobId}:
    get:
      summary: Get sync job by ID
      description: Retrieve a specific sync job by its ID
      tags:
        - Sync Jobs
      security:
        - webAuthAccess: []
      parameters:
        - name: syncJobId
          in: path
          required: true
          schema:
            type: string
          description: Sync job ID
      responses:
        200:
          description: Sync job retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyncJob"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/me:
    get:
      summary: Get current user profile
      description: Get profile information for the currently authenticated user
      tags:
        - Users
      security:
        - webAuthAccess: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Update current user profile
      description: Update profile settings for the currently authenticated user
      tags:
        - Users
      security:
        - webAuthAccess: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isPublic:
                  type: boolean
                  description: Whether the user profile should be public
              required:
                - isPublic
      responses:
        200:
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/{stravaAthleteId}:
    get:
      summary: Get user by Strava athlete ID
      description: Get user profile by Strava athlete ID. Returns public profiles for unauthenticated requests, or any profile for authenticated users who own it.
      tags:
        - Users
      security:
        - webAuthAccess: []
        - {}
      parameters:
        - name: stravaAthleteId
          in: path
          required: true
          schema:
            type: string
          description: Strava athlete ID
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Authentication via Personal Access Token (for APIs)
    webAuthAccess:
      type: apiKey
      in: cookie
      name: stravaholicsAccessToken
      description: Authentication via HTTP-only access token cookie (for Web App)
    webAuthRefresh:
      type: apiKey
      in: cookie
      name: stravaholicsRefreshToken
      description: Authentication via HTTP-only refresh token cookie (for token refresh)

  schemas:
    SportType:
      type: string
      enum:
        [
          AlpineSki,
          BackcountrySki,
          Badminton,
          Canoeing,
          Crossfit,
          EBikeRide,
          Elliptical,
          EMountainBikeRide,
          Golf,
          GravelRide,
          Handcycle,
          HighIntensityIntervalTraining,
          Hike,
          IceSkate,
          InlineSkate,
          Kayaking,
          Kitesurf,
          MountainBikeRide,
          NordicSki,
          Pickleball,
          Pilates,
          Racquetball,
          Ride,
          RockClimbing,
          RollerSki,
          Rowing,
          Run,
          Sail,
          Skateboard,
          Snowboard,
          Snowshoe,
          Soccer,
          Squash,
          StairStepper,
          StandUpPaddling,
          Surfing,
          Swim,
          TableTennis,
          Tennis,
          TrailRun,
          Velomobile,
          VirtualRide,
          VirtualRow,
          VirtualRun,
          Walk,
          WeightTraining,
          Wheelchair,
          Windsurf,
          Workout,
          Yoga,
        ]
      description: Sport type

    Activity:
      type: object
      properties:
        id:
          type: string
          description: Activity ID
        userId:
          type: string
          description: User ID
        name:
          type: string
          description: Activity name
        sportType:
          $ref: "#/components/schemas/SportType"
        startDateTime:
          type: string
          format: date-time
          description: Activity start date and time
        distanceMeters:
          type: number
          description: Distance in meters
        distanceKilometers:
          type: number
          description: Distance in kilometers
        movingTimeMinutes:
          type: number
          description: Moving time in minutes
        totalElevationGainMeters:
          type: number
          description: Total elevation gain in meters
        averageSpeedKilometersPerHour:
          type: number
          description: Average speed in km/h
        averagePaceMinutesPer100Meters:
          type: number
          description: Average pace in min/100 m
        averagePaceMinutesPerKilometer:
          type: number
          description: Average pace in min/km
        maxSpeedKilometersPerHour:
          type: number
          description: Maximum speed in km/h
        averageWatts:
          type: number
          description: Average power in watts
        maxWatts:
          type: number
          description: Maximum power in watts
        description:
          type: string
          description: Activity description
        calories:
          type: number
          description: Calories burned
        averageHeartRate:
          type: number
          description: Average heart rate in BPM
        maxHeartRate:
          type: number
          description: Maximum heart rate in BPM
      required:
        - id
        - userId
        - name
        - sportType
        - startDateTime

    ActivityWithStravaData:
      allOf:
        - $ref: "#/components/schemas/Activity"
        - type: object
          properties:
            stravaData:
              type: object
              description: Raw Strava activity data
          required:
            - stravaData

    StatsPerSportType:
      type: object
      properties:
        activitiesCount:
          type: integer
          description: Number of activities
        distanceMeters:
          type: number
          description: Distance in meters
        distanceKilometers:
          type: number
          description: Distance in kilometers
        movingTimeMinutes:
          type: number
          description: Moving time in minutes
        totalElevationGainMeters:
          type: number
          description: Total elevation gain in meters
        maxSpeedKilometersPerHour:
          type: number
          description: Maximum speed in km/h
        maxWatts:
          type: number
          description: Maximum power in watts
        calories:
          type: number
          description: Calories burned
        maxHeartRate:
          type: number
          description: Maximum heart rate in BPM
      required:
        - activitiesCount

    Stats:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StatsPerSportType"
      description: Statistics grouped by sport type

    ActivitiesCollection:
      type: object
      properties:
        activitiesCount:
          type: integer
          description: Number of activities in the collection
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
          description: Array of activities
        stats:
          $ref: "#/components/schemas/Stats"
      required:
        - activitiesCount
        - activities
        - stats

    ActivitiesWithStravaDataCollection:
      type: object
      properties:
        activitiesCount:
          type: integer
          description: Number of activities in the collection
        activities:
          type: array
          items:
            $ref: "#/components/schemas/ActivityWithStravaData"
          description: Array of activities with Strava data
        stats:
          $ref: "#/components/schemas/Stats"
      required:
        - activitiesCount
        - activities
        - stats

    Pat:
      type: object
      properties:
        id:
          type: string
          description: PAT ID
        userId:
          type: string
          description: User ID
        name:
          type: string
          description: PAT name
        display:
          type: string
          description: Partial token for display purposes
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
          description: Last time the PAT was used
      required:
        - id
        - userId
        - name
        - display
        - lastUsedAt

    CreatedPat:
      allOf:
        - $ref: "#/components/schemas/Pat"
        - type: object
          properties:
            token:
              type: string
              description: Full PAT token (only shown on creation)
          required:
            - token

    PatsCollection:
      type: object
      properties:
        patsCount:
          type: integer
          description: Number of PATs in the collection
        pats:
          type: array
          items:
            $ref: "#/components/schemas/Pat"
          description: Array of PATs
      required:
        - patsCount
        - pats

    SyncJob:
      type: object
      properties:
        id:
          type: string
          description: Sync job ID
        userId:
          type: string
          description: User ID
        status:
          type: string
          enum: [created, started, completed, failed]
          description: Sync job status
        startedAt:
          type: string
          format: date-time
          nullable: true
          description: When the sync job started
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: When the sync job completed
        failedAt:
          type: string
          format: date-time
          nullable: true
          description: When the sync job failed
      required:
        - id
        - userId
        - status
        - startedAt
        - completedAt
        - failedAt

    SyncJobsCollection:
      type: object
      properties:
        syncJobsCount:
          type: integer
          description: Number of sync jobs in the collection
        syncJobs:
          type: array
          items:
            $ref: "#/components/schemas/SyncJob"
          description: Array of sync jobs
      required:
        - syncJobsCount
        - syncJobs

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
      required:
        - message

    User:
      type: object
      properties:
        stravaAthleteId:
          type: string
          description: Strava athlete ID
        isPublic:
          type: boolean
          description: Whether the user profile is public
        firstName:
          type: string
          nullable: true
          description: User's first name
        lastName:
          type: string
          nullable: true
          description: User's last name
        bio:
          type: string
          nullable: true
          description: User's biography
        city:
          type: string
          nullable: true
          description: User's city
        state:
          type: string
          nullable: true
          description: User's state/province
        country:
          type: string
          nullable: true
          description: User's country
        avatarUrl:
          type: string
          nullable: true
          description: URL to user's avatar image
      required:
        - stravaAthleteId
        - isPublic
        - firstName
        - lastName
        - bio
        - city
        - state
        - country
        - avatarUrl

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Bad Request

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Unauthorized

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Not Found

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Internal Server Error
